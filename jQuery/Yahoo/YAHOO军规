https://developer.yahoo.com/performance/rules.html


1.尽可能减少http请求
  图片合并
  js合并
  css合并
  每一个内容就是一个http请求
2.使用cdn（内容分发网络）
  在距离用户较近的地方复制一台性能较好的副本服务器，提高响应速度
3.添加Expire/Cache-Control头
  apache开启expire模块，过期时间内在本地的缓存中寻找资源，不会发http请求
4.gzip
  在本地压缩，在服务器压缩，提升文件传输速度，运行时服务器解压缩
5.将css放在页面最上面（顶部）
  层叠样式表
6.将script放在页面最下面
  一项项往下加载，呈现页面内容再呈现样式
7.避免在css中使用expressions
    每移动一下就会计算一下css表达式，大量减缓浏览器
8.将js和css放到外部
  提高js和css复用性
  减少页面体积
  提高了js和css可维护
  
  缺点：加大了页面请求，减缓了页面渲染速度
9.减少dns查询
  页面点击， 域名转换ip － dns查找服务器， 回应浏览器
  配置相应的缓存：减少dns查询
  多域名：内容放在不同的域名之下
10.最小化js和css
  1.去除不必要的空白服，格式符，注释符号
  2.简写方法名，参数名压缩js脚本
  3.在网站正式上线前，都进行压缩，使得线上版本是最轻量级的
11.避免重定向
  原始请求被重新转向了其他请求
  重定向状态码：（永久重定向）301 moved permanently被移动到了另外的位置，告诉用户之后，用户发起另外请求去这个页面找
                （临时重定向）302 found，不在原始位置。 被找到了，告诉用户，用户去另外位置找
                301：搜索引擎知道了要跳转的位置，下次直接跳转，更智能
                302: 每次都要重新发送一次，
12.两次重复使用的脚本，会重复执行脚本内容
13.配置实体标签： ETag{Entity Tag(实体标签)＋属于http协议＋受web服务支持）
    httpget -> check ETag如果没有改变就返回304，已经存在，查找缓存
      否则，http get +ETag请求
14. post每次都执行（重点看）
    get同一页面不重复执行。缓存
15. yslow针对网站数据进行分析，给出建议，一些规则，一步一步优化自己的网站

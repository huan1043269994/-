1.shell：命令行解释器，为用户提供了一个向linux内核发送请求以便运行程序的界面系统级程序
用shell来启动，挂起，停止甚至编写一些程序
2.ASCII字码表来翻译我们的程序到010101
3.计算机由内向外：内核调用（硬件）->shell->应用程序->用户
  shell把用户命令翻译成0101，计算机认识，传递给内核，执行完之后传递给shell，shell翻译给人为可以看得命令，用户看到
4.windows上也是shell
5.就是当前的操作界面
6.b shell 基本淘汰
  c shell/tcsh unix通用，语法和c非常类似
  bash linux标准shell
  psh
  ksh
7.系统的不同，基本取决于所用的shell不同
8.shell树/子，父   操作界面不是唯一的
9.windows的图形界面可以当成shell
10.命令：echo $SHELL 查看当前使用的shell
        vi /etc/shells看支持那些shell
        bash/csh/tcsh/dash进入子shel，shell树
        exit退出
        rm -rf 1.sh移除shell
        ls当前目录下的文件
11.echo
  -e实现反斜杠:输出非常规整和漂亮的格式
  \0nnn 按照八进制ASCII码表输出字符,nnn为三位八进制数
  \0xhh 按照十六进制ASCII码输出字符，hh为两位十六进制数
  echo可以识别颜色
    开启颜色 \e[1:31m
    关闭颜色 \e[0m
    #30m=黑色 31红 32绿 33黄 34蓝 35洋红 36青色 37白色
12.不要重复造轮子:shell本就是用c语言写了封装好的，所以不需要重新写
13.
  1.赋予执行权限
  chmod +x 1.sh
      ./1.sh
  2.通过bash调用执行脚本
   bash 1.sh
14.bash的基本功能
  1.命令别名和快捷键：
      1.1  alias查看系统中已经生效的别名:例如执行ls：实际上执行了 ls='ls --color=never'，还可以修改别名
      1.2 设定别名：alias ls='ls --color=never'
      1.3 让设定或者修改的别名一直生效，把修改文件写入环境变量配置文件
      1.4 root环境下 vi/root/~/.bashrc修改环境变量,永久生效
      1.5 unalias删除别名，临时的，必须写入环境变量
      1.6 别名的优先级比原始命令要高，所以敲命令的时候执行别名
      1.7 命令生效的优先级：
        1.绝对命令或相对路径
        2.执行别名
        3.bash的内部命令 
        4.$PATH环境变量定义的目录查找顺序找到的第一个命令
  2.快捷键：
      ctrl+l 清屏
      ctrl+c 强制终止命令
      ctrl+u 从行尾删到行首
      ctrl+a 移行首
      ctrl+e 移行尾
      ctrl+z 命令放入后台
      ctrl+r 在历史命令搜索
      
  历史命令
    hisory所有的命令包括当前打开窗口输入的命令
    cat .bash_history 这次窗口没有保存前的所有命令
    ls -a -al -alg -alh
    -c 清空历史命令
    -w 将缓存中的历史命令写入历史命令保存文件 ~/.bash_history
    vi /etc/profile 修改历史命令的条数
    !n:执行第条命令
    !!重复执行上一条命令
    !字串 重复执行最后一条以该字串开头的命令
    tab键补全
    
  输出重定向 
    /dev目录保存硬件特殊文件的标准目录。
    在linux中，一切皆文件
    输入设备（文件描述符）
    标准输入设备：/dev/stdin ：0
        输出      /dev/stdout :1
        错误输出  /dev/stderr :2
    本来应该输出的屏幕上的输出到文件
    标准输出不能保存错误的信息，加上2 hhhhh 2>>test.log("无空格"）
                                      ifconfig >> test.log(有空格）
                                      //正确和错误的都保存在test.log ifconfig > test.log 2>&1
                                      ifconfig >> test.log 2>&1
                                      或者 ifconfig &>test.log
                                            ifconfig &>>test.log
                                        ls &>/dev/null 黑洞，扔进去就没有了
                                      //  command>>test.log 2>>test1.log
      输入重定向：
      wc ctrl+d 统计行/单词数/多少个字母
      wc -c:字符数
         -w:单词数
         -l:行数
      wc:以文件作为输入，输入重定向
        wc < test.log
        wc test.log  (会输出文件名)
        wc << log
        ...
        ...
        log
        把log开始，log结束的内容作为输入，然后统计
        
        
  多命令顺序执行
    ; ：命令1,2,3，顺序执行,可以查看命令执行完需要多少时间
      date ; .... ; date
    && 
    ||
    ifconfig && echo yes || echo no判断命令是否正确执行了
  管道符
    command 1 | command2 命令一执行输出作为command2的命令对象
    grep 查看字符串
    netstat -an查看所有的网络连接。grep查看所有的指定字符串，wc统计
  shell中特殊符号
    ""：能显示转义和变量
    ''：任何都失效
    ``：引用系统的命令
    # ：注释
    $ ：调用变量的值
    \ : 转义符
    $()：相当于反引号
  通配符
    任意一个字符：?
    0个或任意多个：*
    匹配任意一个字符：[abc]匹配a，b，c中任意一个
    [-]:匹配在区间之间的字符
    [^]匹配不是括号中的一个字符

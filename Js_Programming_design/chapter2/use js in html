1. <script>元素
  1.1 async:可选，立即下载脚本，但是异步的，对外部脚本有效
  1.2 charset（少）
  1.3 defer：外部，不管放到哪，等文档完全被解析和现实之后再执行
  1.4 language（废弃）
  1.5 src
  1.6 type：第一次知道MIME类型 （捂脸） text/javascript(通用但不必须)
  , 而服务器再传送js用的MIME类型是：application/x-javascript(脚本中不应该设置这个值）
2. js解析器，在包含在script里面的代码：从上到下解释，保存在自己的环境中，同步加载（被完全加载完之前，页面其他内容不会被加载）
  2.1 除了首尾，不要在任何地方出现 </script>,不过转义字符可以搞定
  2.2 src外部文件地址，解析时页面也会停止加载，所以放置的位置很重要
  2.3 一般js文件，浏览器不会检查扩展名，所以能使用jsp，php动态生成js代码就成为了可能，但一般要保证服务器能知道响应此文件的MIME类型。
  2.4 不包含额外的代码，是不会执行的（代src）。
  2.5 src会跨域访问，所以要确定来自的那个域是自己的或者是可以信赖的
  2.6 只要不包含：defer和async就可以保证js按顺序执行
3. 标签的位置
  放在head之中，浏览器首先加载head之中的内容，所以这样必须等到所有的js代码 加载＋解析＋执行完成之后才开始呈现内容，所以一般放在body结束标签前面
  defer：延迟到页面加载完之后执行，html规范不同于现实，所以只建议一个延迟脚本，也不一定会在DOMContentLoaded事件
  async： 只适用于外部脚本，异步下载脚本，异步执行，一定在load之前但不确定相对在DOMContentLoaded事件的速度.
4. js外部链接的好处
  可维护性：低耦合
  可缓存：多个页面使用同一文件，那么只需要加载一次
  适应未来：html和xhtml外部包含相同
5. 混杂和标准模式的IE，影响css内容的呈现
  准标准模式：很多是符合标准的，但是在处理图片间隙（特别是表格里面图片时）问题很明显，与标准模式几乎一样
  标准模式：以后叫的话出了混杂就是标准模式了，我一般喜欢用 html5文档类型申明，向后兼容，向前兼容
  混杂模式
6. <noscript>标签，让不支持js的浏览器平稳退化，在浏览器不支持脚本，或者支持脚本但是被禁用的情况下激发
